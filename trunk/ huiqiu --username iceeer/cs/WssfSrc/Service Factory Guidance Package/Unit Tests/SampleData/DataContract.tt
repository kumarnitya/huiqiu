<#@ Template Language="C#" #>
<#@ Assembly name="Microsoft.Practices.ServiceFactory.DataContracts.Dsl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=##CustomPublicKeyToken##" #>
<#@ Assembly name="Microsoft.VisualStudio.Modeling.Sdk, Version=8.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" #>
<#@ Import Namespace="System.Xml.Serialization" #>
<#@ Import Namespace="System.Runtime.Serialization" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.DataContracts" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling" #>
<#@ ModelInjector processor="ModelInjectorDirectiveProcessor" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using WCF = global::System.Runtime.Serialization;

namespace NamespacePlaceHolder  // Add the default namespace from the current project
{
	/// <summary>
	/// Data Contract Class - <#= ((DataContractElement)this.CurrentElement).Name #>
	/// </summary>
	[WCF::DataContract(Namespace = "<#= ((DataContractElement)this.CurrentElement).Namespace #>", Name = "<#= ((DataContractElement)this.CurrentElement).Name #>")]
	public partial class <#= ((DataContractElement)this.CurrentElement).Name #> 
	{
<# 
	DataContractElement spme = (DataContractElement)this.CurrentElement;		
	foreach(AbstractDataElement member in spme.DataElements)
	{ 	
		PopulateMemberVars(member);
		if( memberType != null )
		{				
	#>		private <#= memberType #> <#= memberPrivateName #>;
<#
		} // closes if  
	} // closes foreach

	foreach(AbstractDataElement member in spme.DataElements)
	{ 	
		PopulateMemberVars(member);
		if( memberType != null )
		{
#>
		<#= memberAttribute #>
		public <#= memberType #> <#= memberName #>
		{
		  get { return <#= memberPrivateName #>; }
		  set { <#= memberPrivateName #> = value; }
		}				
<#
		} // closes if
    } // closes foreach
#>
	}
}




<#+
private	string memberType = null;
private	string memberName = null; 
private	string memberPrivateName = null; 
private string memberAttribute = null;

private void PopulateMemberVars(AbstractDataElement member)
{
	if (member is PrimitiveDataElement)
	{
		PrimitiveDataElement pde = (PrimitiveDataElement)member;
		memberType = pde.IsArray ? "IList<"+pde.Type+">" : pde.Type;
	}
	if (member is DataContractDataElement)
	{
		DataContractDataElement dcde = (DataContractDataElement)member;
		Microsoft.Practices.ServiceFactory.DataContracts.Multiplicity multiplicity = dcde.GetTargetMultiplicity();
		if( multiplicity == Microsoft.Practices.ServiceFactory.DataContracts.Multiplicity.One ||
		    multiplicity == Microsoft.Practices.ServiceFactory.DataContracts.Multiplicity.ZeroOne)
		{
			memberType = dcde.Type;  
		}
		else
		{
			memberType = "IList<"+dcde.Type+">";
		}
	}									
	memberName = member.Name;
	memberPrivateName = memberName + "Field"; 
	memberAttribute = member.IsDataMember ? "\r\n\t\t[WCF::DataMember(Name = \""+memberName+"\")]" : String.Empty;								
}
#>


<#
/***************************************************************************
         Copyright (c) Microsoft Corporation, All rights reserved.             
    This code sample is provided "AS IS" without warranty of any kind, 
    it is not recommended for use in a production environment.
***************************************************************************/
#>
<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".wxs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Collections.Generic" #>
<?xml version="1.0" encoding="utf-8"?>
<!--
	Installs required assemblies and files.

	<autogenerated>
		This code was generated by a tool.
		Changes to this file may cause incorrect behavior and will be lost if
		the code is regenerated.
	</autogenerated>
-->
<Wix xmlns="http://schemas.microsoft.com/wix/2003/01/wi">
<#
	Guid productCode = new Guid(this.InstallerDefinition.ProductCode);
	DslPackage dslPackage = this.InstallerDefinition.DslPackage;
#>
	<Fragment>
		<ComponentGroup Id="_<#=dslPackage.Name#>ComponentGroup">
			<ComponentRef Id="_<#=dslPackage.Name#>_GAC" />
<# 
	if(this.InstallerDefinition.SupportingFiles.Count > 0 || this.InstallerDefinition.LicenseAgreement != null)
{ 
#>
			<ComponentRef Id="SupportingFiles" />
<# 
} 
#>

<# 
	foreach(SupportingAssembly assembly in dslPackage.SupportingAssemblies)
	{		
#>
			<ComponentRef Id="_<#=assembly.Name#>_GAC" />
<# } #>

<# 
	if(this.InstallerDefinition.DslSchemas.Count > 0)
	{
#>
			<ComponentRef Id="<#=dslPackage.Name#>Schemas" />
<#
	}
#>
	    </ComponentGroup>
	
		<DirectoryRef Id="DslDirectory">

			<!-- Install supporting files and shortcuts -->
<# 
	if(this.InstallerDefinition.SupportingFiles.Count > 0 || this.InstallerDefinition.LicenseAgreement != null)
	{
		bool hasShortcuts = false;
		foreach(SupportingFile file in this.InstallerDefinition.SupportingFiles)
		{
			if(file.InstallShortcut)
			{
				hasShortcuts = true;
				break;
			}
		}
		
		if(hasShortcuts)
		{
#>
			<Directory Id="ProgramMenuFolder" SourceName="USER'S" LongSource="User's Programs Menu">
				<Directory Id="ProgramMenuShortcutDirectory" <#=this.GetWixNameAttributes2(this.InstallerDefinition.DefaultDirectoryName)#> />
			</Directory>
<#
		}
#>
			<Component Id="SupportingFiles" Guid="<#=this.GenerateComponentGuid(productCode, @"INSTALLDIR\SupportingFiles")#>" DiskId="1">
<#
		LicenseAgreement licenseAgreement = this.InstallerDefinition.LicenseAgreement;	
		if(licenseAgreement != null)
		{
			int licenseDiskId = licenseAgreement.IsEmbedded ? 1 : 2;
			string licenseCompressed = licenseAgreement.IsEmbedded ? "yes" : "no";
#>
				<!-- Install license agreement. -->
				<File Id="_LicenseAgreement" <#=this.GetWixNameAttributes2(licenseAgreement.FilePath)#> src="SourceDir\\<#=licenseAgreement.FilePath#>" Vital="yes" Compressed="<#=licenseCompressed#>" DiskId="<#=licenseDiskId#>" />
<#
		}
		
		foreach(SupportingFile file in this.InstallerDefinition.SupportingFiles)
		{
			int diskId = file.IsEmbedded ? 1 : 2;
			string compressed = file.IsEmbedded ? "yes" : "no";
#>				
				<File Id="_<#=file.Name#>" <#=this.GetWixNameAttributes2(file.FilePath)#> src="SourceDir\\<#=file.FilePath#>" Vital="yes" Compressed="<#=compressed#>" DiskId="<#=diskId#>">
<# 
			if(file.InstallShortcut)
			{
				string iconInfo = !String.IsNullOrEmpty(file.ShortcutIconPath) ? "Icon=\"_" + file.Name + "Shortcut.ico\" IconIndex=\"0\"" : String.Empty;
#>
					<Shortcut Id="_<#=file.Name#>Shortcut" Directory="ProgramMenuShortcutDirectory" <#=this.GetWixNameAttributes2(file.FilePath)#> <#=iconInfo#> Show="normal" WorkingDirectory="INSTALLDIR" />
<#
			}
#>	
				</File>
<# 
		}
		
		if(hasShortcuts)
		{
#>
				<RemoveFolder Directory="ProgramMenuShortcutDirectory" On="uninstall" Id="ShortcutRemoveFolder" />
<#
		}
#>
			</Component>	
<#
	}
	
	string assemblyFullPath = this.ResolveRelativeFilePath(dslPackage.AssemblyPath);
	AssemblyName assemblyName = AssemblyName.GetAssemblyName(assemblyFullPath);
	string publicKeyToken = String.Empty;
	foreach(byte b in assemblyName.GetPublicKeyToken())
	{
		publicKeyToken += b.ToString("X2");
	}
	string assemblyCulture = assemblyName.CultureInfo.Name;
	if(string.IsNullOrEmpty(assemblyCulture))
	{
		assemblyCulture = "neutral";
	}
	FileVersionInfo fileVersionInfo = FileVersionInfo.GetVersionInfo(assemblyFullPath);
#>
			<!-- Install required assemblies to the GAC. Place components in an "Install" subdirectory to prevent MSI validation errors. -->
			<Directory Id="<#=dslPackage.Name#>Install" <#=this.GetWixNameAttributes2(dslPackage.Name + "Install")#>>
				<Component Id="_<#=dslPackage.Name#>_GAC" Guid="<#=this.GenerateComponentGuid(productCode, @"INSTALLDIR\Install\" + assemblyName.Name)#>" DiskId="1">
					<File Id="_<#=dslPackage.Name#>Dll_GAC" KeyPath="yes" <#=this.GetWixNameAttributes2(dslPackage.AssemblyPath)#> src="SourceDir\\<#=dslPackage.AssemblyPath#>" Vital="yes" Assembly=".net" ProcessorArchitecture="<#=assemblyName.ProcessorArchitecture.ToString().ToLower()#>" AssemblyManifest="_<#=dslPackage.Name#>Dll_GAC">
						<AssemblyName Id="Name" Value="<#=assemblyName.Name#>" />
						<AssemblyName Id="Version" Value="<#=assemblyName.Version#>" />
						<AssemblyName Id="Culture" Value="<#=assemblyCulture#>" />
						<AssemblyName Id="PublicKeyToken" Value="<#=publicKeyToken#>" />
						<AssemblyName Id="FileVersion" Value="<#=fileVersionInfo.FileVersion#>"/>
						<AssemblyName Id="ProcessorArchitecture" Value="<#=assemblyName.ProcessorArchitecture#>" />
					</File>
				</Component>
				
<# 
	foreach(SupportingAssembly assembly in dslPackage.SupportingAssemblies)
	{
		assemblyFullPath = this.ResolveRelativeFilePath(assembly.AssemblyPath);
		assemblyName = AssemblyName.GetAssemblyName(assemblyFullPath);
		publicKeyToken = String.Empty;
		foreach(byte b in assemblyName.GetPublicKeyToken())
		{
			publicKeyToken += b.ToString("X2");
		}
		assemblyCulture = assemblyName.CultureInfo.Name;
		if(string.IsNullOrEmpty(assemblyCulture))
		{
			assemblyCulture = "neutral";
		}
		fileVersionInfo = FileVersionInfo.GetVersionInfo(assemblyFullPath);
#>
				<Component Id="_<#=assembly.Name#>_GAC" Guid="<#=this.GenerateComponentGuid(productCode, @"INSTALLDIR\Install\" + assemblyName.Name)#>" DiskId="1">
					<File Id="_<#=assembly.Name#>Dll_GAC" KeyPath="yes" <#=this.GetWixNameAttributes2(assembly.AssemblyPath)#> src="SourceDir\\<#=assembly.AssemblyPath#>" Vital="yes" Assembly=".net" ProcessorArchitecture="<#=assemblyName.ProcessorArchitecture.ToString().ToLower()#>" AssemblyManifest="_<#=assembly.Name#>Dll_GAC">
						<AssemblyName Id="Name" Value="<#=assemblyName.Name#>" />
						<AssemblyName Id="Version" Value="<#=assemblyName.Version#>" />
						<AssemblyName Id="Culture" Value="<#=assemblyCulture#>" />
						<AssemblyName Id="PublicKeyToken" Value="<#=publicKeyToken#>" />
						<AssemblyName Id="FileVersion" Value="<#=fileVersionInfo.FileVersion#>"/>
						<AssemblyName Id="ProcessorArchitecture" Value="<#=assemblyName.ProcessorArchitecture#>" />
					</File>
				</Component>
<#
	}
#>
			</Directory>
			

		</DirectoryRef>
			<DirectoryRef Id="VSINSTALLDIR">
<#
	if(this.InstallerDefinition.VSItemTemplates.Count > 0)
	{
#>
				<!-- Install project item templates -->
				<Directory Id="ItemTemplatesDirectory" Name="ITEMTEMT" LongName="ItemTemplates">
<#=this.GenerateItemTemplateWix(5)#>
				</Directory>
<#
	}

	if(this.InstallerDefinition.VSProjectTemplates.Count > 0)
	{
#>
				<!-- Install project templates -->
				<Directory Id="ProjectTemplatesDirectory" Name="PROJECTT" LongName="ProjectTemplates">
<#=this.GenerateProjectTemplateWix(5)#>
				</Directory>
<#
	}
#>
			</DirectoryRef>
<#
	
	if(this.InstallerDefinition.TextTemplates.Count > 0)
	{
#>				
			<!-- Install text template include files. -->
			<Directory Id="TextTemplatesDirectory" Name="TEXTTEMP" LongName="TextTemplates">
				<Component Id="TextTemplates" Guid="<#=this.GenerateComponentGuid(productCode, @"INSTALLDIR\TextTemplates")#>" DiskId="1">
<#
	foreach(TextTemplate template in this.InstallerDefinition.TextTemplates)
	{
#>
					<File Id="_<#=Path.GetFileNameWithoutExtension(template.TemplatePath)#>" <#=this.GetWixNameAttributes2(template.TemplatePath)#> src="SourceDir\\<#=template.TemplatePath#>" Vital="yes" />
<#
	}
#>
				</Component>
			</Directory>
<#
	}
	
	if(this.InstallerDefinition.DslSchemas.Count > 0)
	{
#>
			<DirectoryRef Id="SchemasDirectory">
				<Component Id="<#=dslPackage.Name#>Schemas" Guid="<#=this.GenerateComponentGuid(@"VSROOTDIR\Schemas\" + Path.GetFileName(this.InstallerDefinition.DslSchemas[0].FilePath))#>" DiskId="1">
<#
		int i=1;
		foreach(DslSchema schema in this.InstallerDefinition.DslSchemas)
		{
#>
					<File Id="_<#=dslPackage.Name#>Schema<#= i++ #>" <#=this.GetWixNameAttributes2(schema.FilePath)#> src="SourceDir\\<#=schema.FilePath#>" Vital="yes" />
<#
		}
#>
				</Component>
			</DirectoryRef>
<#
	}	

	if(this.InstallerDefinition.MergeModules.Count > 0)
	{
#>	
			<!-- Include merge modules. -->
<#	
		foreach(MergeModule mergeModule in this.InstallerDefinition.MergeModules)
		{
#>
			<Merge Id="_<#=mergeModule.Name#>" Language="<#=mergeModule.LocaleId#>" src="<#=mergeModule.ModulePath#>" DiskId="1" />
<#
		}
	}
#>
	</Fragment>
</Wix>

<#+
static int counter = 0;

public string GetWixNameAttributes2(string filePath) 
{
	string originalAttributes = GetWixNameAttributes(filePath);
	string[] attributes = originalAttributes.Split(' ','=');
	
	string longFileName = attributes[3];
	string shortName = attributes[1];
	
	if (longFileName.Length > 11)
	{
		string[] longParts = longFileName.Split('.');
		
		// This is a cheap way to get the more unique portion of
		// the file names to avoid clashes with other DSL names.
		// Since its in a tt, this can be customized to what will 
		// support other's naming conventions.
		if (longParts.Length > 4)
		{
			int digitCount = ((int)(counter / 10)) + 1;
			
			// Build 8.3 name
			string newShortName = string.Format("\"{0}.{1}", 
										longParts[3].Substring(0,8-digitCount) + counter.ToString(),
										longParts[longParts.Length - 1]);
			counter++;
			
			return string.Format("Name={0} LongName={1}", newShortName, longFileName);
			
		}
		else 
		{
			return originalAttributes;
		}
	}
	else 
	{
		return originalAttributes;
	}
}
#>
<#@ Template Language="C#" Inherits="Microsoft.Practices.Modeling.CodeGeneration.Strategies.TextTemplating.ModelingTextTransformation" #>
<#@ Import Namespace="System.Text" #>
<#@ Import Namespace="System.Globalization" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.ServiceModel" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.ServiceContracts" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.DataContracts" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Wcf" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.Description" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.DataContracts.Dsl, Version=3.1.0.0, Culture=neutral, PublicKeyToken=##CustomPublicKeyToken##" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Wcf, Version=3.1.0.0, Culture=neutral, PublicKeyToken=##CustomPublicKeyToken##" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl, Version=3.1.0.0, Culture=neutral, PublicKeyToken=##CustomPublicKeyToken##" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.Description, Version=3.1.0.0, Culture=neutral, PublicKeyToken=##CustomPublicKeyToken##" #>
<#@ Assembly Name="System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ ModelInjector processor="ModelInjectorDirectiveProcessor" #>
<#@ include file="TextTemplates\WCF\CS\CommonTextTransformation.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using WCF = global::System.ServiceModel;

namespace <#=CurrentExtender.ArtifactLink.Namespace#>
{	
	/// <summary>
	/// Service Class - <#= CurrentElement.Name #>
	/// </summary>
	[WCF::ServiceBehavior(Name = "<#= CurrentElement.Name #>", 
		Namespace = "<#= CurrentElement.Namespace #>", 
		InstanceContextMode = WCF::InstanceContextMode.<#= CurrentExtender.InstanceContextMode.ToString() #>, 
		ConcurrencyMode = WCF::ConcurrencyMode.<#= CurrentExtender.ConcurrencyMode.ToString() #> )]
	public abstract class <#= CurrentElement.Name #>Base <#= BuildInheritedServiceContract(CurrentElement.ServiceContract) #>
	{
<#
		if (CurrentElement.ServiceContract != null) {
#>
		#region <#= CurrentElement.ServiceContract.Name #> Members

<#
		foreach(Operation operation in CurrentElement.ServiceContract.Operations)
		{
			WCFOperationContract wcfOperation = GetObjectExtender<WCFOperationContract>(operation);

			if (!wcfOperation.AsyncPattern)
			{

#>
		public virtual <#= GetResponseElement(operation.Response) #> <#= operation.Name #>(<#= GetRequestElement(operation.Request) #>)
		{
			<#= GetImplementation(operation.Response) #>
		}

<#
			}
			else
			{

#>
		public virtual IAsyncResult Begin<#=operation.Name#>(<#= GetRequestElement(operation.Request,UseComma.Yes) #>AsyncCallback callback, object state)
		{
			return null;
		}

		public virtual <#= GetResponseElement(operation.Response) #> End<#=operation.Name#>(IAsyncResult result)
		{
			<#= GetImplementation(operation.Response) #>
		}

<#			} // close if

		} // close Operations foreach
#>
		#endregion		
<#
	} // end if
#>		
	}
	
	public partial class <#= CurrentElement.Name #> : <#= CurrentElement.Name #>Base
	{
	}
	
}

<#+
	private string BuildInheritedServiceContract(ServiceContract serviceContract)
	{
		if (serviceContract == null)
		{
			return string.Empty;
		}
		else
		{
			return ": " + ResolveServiceContractNameAndAddProjectRef(serviceContract);
		}
	}
	
	private string ResolveServiceContractNameAndAddProjectRef(ServiceContract contract)
	{
		WCFServiceContract wfcSc = GetObjectExtender<WCFServiceContract>(contract);
		if(wfcSc == null)
		{
			return string.Concat("I", contract.Name);
		}
		
		//Add References to Fault contract projects
		
		foreach(Operation operation in contract.Operations)
		{
			foreach(Fault fault in operation.Faults)
			{
				ResolveFaultTypeAndAddProjectReference(fault);
			}
		}
		
		AddProjectReference(wfcSc.ArtifactLink);
		return string.Concat(wfcSc.ArtifactLink.Namespace, ".", wfcSc.ServiceContractName);
	}

#>




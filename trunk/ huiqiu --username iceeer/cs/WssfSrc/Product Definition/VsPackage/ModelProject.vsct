<?xml version="1.0" encoding="utf-8"?>
<CommandTable xmlns="http://schemas.microsoft.com/VisualStudio/2005-10-18/CommandTable" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--  This is the file that defines the actual layout and type of the commands.
        It is divided in different sections (e.g. command definition, command
        placement, ...), with each defining a specific set of properties.
        See the comment before each section for more details about how to
        use it. -->

  <!--  The VSCT compiler (the tool that translates this file into the binary 
        format that VisualStudio will consume) has the ability to run a preprocessor 
        on the vsct file; this preprocessor is (usually) the C++ preprocessor, so 
        it is possible to define includes and macros with the same syntax used 
        in C++ files. Using this ability of the compiler here, we include some files 
        defining some of the constants that we will use inside the file. -->

  <!--This is the file that defines the IDs for all the commands exposed by VisualStudio. -->
  <Extern href="stdidcmd.h"/>
  <!--This header contains the command ids for the menus provided by the shell. -->
  <Extern href="vsshlids.h"/>
  <!--Definition of some VSCT specific constants. In this sample we use it for the IDs inside the guidOfficeIcon group. -->
  <Extern href="msobtnid.h"/>

  <!--The Commands section is where we the commands, menus and menu groups are defined.
      This section uses a Guid to identify the package that provides the command defined inside it. -->
  <Commands package="guidWebServicesFactoryPkg">
    <!--This is the sub-section that defines the menus and toolbars.-->
    <Menus>
    </Menus>
    <!-- In this section you can define new menu groups. A menu group is a container for 
         other menus or buttons (commands); from a visual point of view you can see the 
         group as the part of a menu contained between two lines. The parent of a group 
         must be a menu. -->
    <Groups>
    </Groups>
    <!--Buttons section. -->
    <!--This section defines the elements the user can interact with, like a menu command or a button 
        or combo box in a toolbar. -->
    <Buttons>
      <!--To define a menu group you have to specify its ID, the parent menu and its display priority. 
          Some commands are not defined as shared, so they use our package CLSID as the command set GUID. 
          Also, by specifying blank for the FLAGS, the command is default visible and enabled. Other valid 
          values for FLAGS are the following: DEFAULTDISABLED, DEFAULTINVISIBLE, DYNAMICVISIBILITY, TEXTCHANGES 
          
          These values for FLAGS can be or'ed together, e.g. "DEFAULTINVISIBLE | DYNAMICVISIBILITY" 
          If you do not want an image next to your command, set the image to "guidOfficeIcon:msotcidNoIcon" -->
    </Buttons>
    <!--The bitmaps section is used to define the bitmaps that are used for the commands.-->
    <Bitmaps>
      <!--  The bitmap id is defined in a way that is a little bit different from the others: 
            the declaration starts with a guid for the bitmap strip, then there is the resource id of the 
            bitmap strip containing the bitmaps and then there are the numeric ids of the elements used 
            inside a button definition. An important aspect of this declaration is that the element id 
            must be the actual index (1-based) of the bitmap inside the bitmap strip. -->
    </Bitmaps>
  </Commands>
  <!-- This section is where you can associate a command with a keyboard shortcut; this association is
  valid within a specific UI context, that is when the shell is inside a specific mode, e.g. during
  debugging, editing a file or when the user is using a specific designer. -->
  <VisibilityConstraints>
  </VisibilityConstraints>
  <KeyBindings>
     <!--Keybindings 
       To define a binding, you have to specify the sequence of keys to press to activate the command  
       (keystate); 
       
       Notice that Visual Studio has a lot of components and commands, so it can be difficult to find a  
       key binding not used by somebody else; if the key bindings are conflicting only one will be used 
       and one problem is that the shell will not inform the user that a conflict was found. The only  
       way to detect the problem is to start Visual Studio under debugger, try to execute any command  
       and look if there is a message in the output window about a duplicated accelerator found.--> 
  </KeyBindings>
  <Symbols>
    <!-- This is the package guid. -->
    <GuidSymbol name="guidWebServicesFactoryPkg" value="{3a053d37-49a0-4713-a3c4-6161158fb0c4}" />
    <!-- This is the guid used to group the menu commands together -->
  </Symbols>
</CommandTable>
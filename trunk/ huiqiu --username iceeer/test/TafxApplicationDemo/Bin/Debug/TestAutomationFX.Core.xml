<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestAutomationFX.Core</name>
    </assembly>
    <members>
        <member name="F:TestAutomationFX.UI.ClickThroughForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.ClickThroughForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.ClickThroughForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.UnderTestInfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UnderTestInfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UnderTestInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.FindObjectBaseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:TestAutomationFX.UI.FindObjectBaseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.FindObjectBaseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.RemapObjectForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.RemapObjectForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.RemapObjectForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.MsaaInfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.MsaaInfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.MsaaInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.EnterLicenseKeyForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.EnterLicenseKeyForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.EnterLicenseKeyForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Controls.Tree.TreeViewEx.EnsureVisible(TestAutomationFX.Controls.Tree.TreeNodeAdv)">
            <summary>
            Expand all parent nodes, andd scroll to the specified node
            </summary>
        </member>
        <member name="M:TestAutomationFX.Controls.Tree.TreeViewEx.ScrollTo(TestAutomationFX.Controls.Tree.TreeNodeAdv)">
            <summary>
            Make node visible, scroll if needed. All parent nodes of the specified node must be expanded
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:TestAutomationFX.Controls.Tree.TreeViewEx.VisibleNodes">
            <summary>
            returns all nodes, which parent is expanded
            </summary>
        </member>
        <member name="P:TestAutomationFX.Controls.Tree.TreeViewEx.CurrentPageSize">
            <summary>
            Number of rows fits to the current page
            </summary>
        </member>
        <member name="P:TestAutomationFX.Controls.Tree.TreeViewEx.RowCount">
            <summary>
            Number of all visible nodes (which parent is expanded)
            </summary>
        </member>
        <member name="P:TestAutomationFX.Controls.Tree.TreeViewEx.AsyncExpanding">
            <summary>
            When set to true, node contents will be read in background thread
            </summary>
        </member>
        <member name="E:TestAutomationFX.Controls.Tree.NodeControls.BaseTextControl.DrawText">
            <summary>
            Fires when control is going to draw a text. Can be used to change text or back color
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.TestRunner.TestSuiteListControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestSuiteListControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestSuiteListControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TestAutomationFX.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TestAutomationFX.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.Logging.LogFile.#ctor">
            <summary>
            Initializes a new instance of the LogFile class.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.CustomVerifier">
            <summary>
            This class provides a base on which you can build your own verifiers that can be used during recording and in code.    
            </summary>
            <remarks>
            <para>To create your own custom verifier you should derive from CustomVerifier and implement a static method that performs the verification needed.     
            You can override the <see cref="P:TestAutomationFX.Core.CustomVerifier.StaticVerifyMetodName"/> method if you want to use another name than Verify on the static method.</para>
            <para>In <see cref="M:TestAutomationFX.Core.CustomVerifier.GetParameters"/> you should return the parameters that the verification method needs.</para>    
            <para>If you like you can also override <see cref="M:TestAutomationFX.Core.CustomVerifier.GetRecordedAction"/> to return a totally custom <see cref="T:TestAutomationFX.Core.Recording.RecordedAction"/>.</para>     
            <para>The public properties you add to your class are shown in a property grid in the Add Verification Dialog so that the behaviour of the verifier can be set during recording.</para>
            </remarks>
            <example>
            This sample shows how to implement a custom verifier that checks the current working set of the application. 
            <pre title="Code example" lang="cs">
            <code source="C:\Projects\TAFX\TestAutomationFX.CodeSamples\MyVerifier.cs" lang="cs"/>
            </pre>
            <pre title="Code example" lang="vbnet">
            <code source="C:\Projects\TAFX\TestAutomationFX.CodeSamplesVB\MyVerifier.vb" lang="vbnet"/>
            </pre>
            </example>
        </member>
        <member name="M:TestAutomationFX.Core.CustomVerifier.GetRecordedAction">
            <summary>
            Override this method to provide a totally customized <see cref="T:TestAutomationFX.Core.Recording.RecordedAction"/>. This is useful if you want more control
            of how the code is generated for your verification.
            </summary>
            <returns>A <see cref="T:TestAutomationFX.Core.Recording.RecordedAction"/> that will be used to generate code for your custom verifier.</returns>
        </member>
        <member name="M:TestAutomationFX.Core.CustomVerifier.GetParameters">
            <summary>
            This method should return the parameter values for your static verification method.
            You can return different sets of parameters if you have more that one static verifier methods.
            </summary>
            <returns>An object array containing the parameter values that are used to perform the verification.</returns>       
        </member>
        <member name="M:TestAutomationFX.Core.CustomVerifier.Validate">
            <summary>
            Override this method to perform custom validation for your verifier.
            </summary>
            <returns>True if validation succeeded or false if the verifier cannot generate a <see cref="T:TestAutomationFX.Core.Recording.RecordedAction"/>. The default is true.</returns>
        </member>
        <member name="P:TestAutomationFX.Core.CustomVerifier.DisplayName">
            <summary>
            Override this property to provide a specific name that is displayed for this verifier when it is shown in the Add verification dialog.
            </summary>
        </member>
        <member name="P:TestAutomationFX.Core.CustomVerifier.StaticVerifyMetodName">
            <summary>
            Override this property to provide another method name than Verify for you static verification method.        
            </summary>        
        </member>
        <member name="P:TestAutomationFX.Core.CustomVerifier.SelectedUIObject">
            <summary>
            This property provides a reference to the UIObject that is selected in the Add Verification Dialog.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.Verify">
            <summary>
            The Verify class implements some basic verification functions.
            </summary>
            <remarks>
            <para>You can add your own verification functionality simply by checking values and throwing a <see cref="T:TestAutomationFX.Core.VerifyException"/> when a verification fails.</para>
            <para>If you want to use your own verifier functionality in the recording mode you should implement a <see cref="T:TestAutomationFX.Core.CustomVerifier"/>.</para>
            </remarks>
        </member>
        <member name="M:TestAutomationFX.Core.Verify.FileExists(System.String)">
            <summary>
            Check if a file exists.
            </summary>
            <param name="fileName">The file path to check.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Verify.FileExists(System.String,System.String)">
            <summary>
            Check if a file exists.
            </summary>
            <param name="fileName">The file path to check.</param>
            <param name="message">Additional message added to the log.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Verify.FileExists(System.String,System.Environment.SpecialFolder)">
            <summary>
            Check if a file exists in a special folder.
            </summary>
            <param name="fileName">The file name to check.</param>
            <param name="specialFolder">The special folder in which to check for the file.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Verify.FileExists(System.String,System.Environment.SpecialFolder,System.String)">
            <summary>
            Check if a file exists in a special folder.
            </summary>
            <param name="fileName">The file name to check.</param>
            <param name="specialFolder">The special folder in which to check for the file.</param>
            <param name="message">Additional message added to the log.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Verify.FailTest(System.String)">
            <summary>
            Calling this method will cause the test to fail.
            </summary>
            <param name="message">The message to fail the test with.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Verify.FailTest(System.String,TestAutomationFX.Core.Logging.LogData)">
            <summary>
            Calling this method will cause the test to fail.
            </summary>
            <param name="message">The message to fail the test with.</param>
            <param name="logData">A <see cref="T:TestAutomationFX.Core.Logging.LogData"/> instance that can contain more information of why the test failed.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Verify.AreEqual(System.Object,System.Object)">
            <summary>
            Verify that two values are equal. If not the test will fail.
            </summary>
            <param name="actual">The actual value.</param>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Verify.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Verify that two values are equal. If not the test will fail.
            </summary>
            <param name="actual">The actual value.</param>
            <param name="expected">The expected value</param>
            <param name="message">A string that will be added at the end of the log message. Could be a explanatory text to clearify what kind of test error it is.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Verify.UserAcknowledge(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.DialogResult)">
            <summary>
            Calling this function will bring up a MessageBox with the title "Acknowledge". If the user does not select the result that is expected the test will fail. 
            This method will automatically turn off the InputBlocker functionality to allow the user to interact with the MessageBox.
            </summary>
            <param name="message">The message to show in the MessageBox.</param>
            <param name="messageBoxButtons">Which MessageBox buttons will be available.</param>
            <param name="expectedDialogResult">Dialog result to expect to not fail the test.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Verify.UserAcknowledge(System.String)">
            <summary>
            Calling this function will bring up a MessageBox with the title "Acknowledge" and with yes/no buttons where the yes button is the expected result.
            </summary>
            <param name="message">The message to show in the MessageBox.</param>
        </member>
        <member name="F:TestAutomationFX.UI.UpdateCheckerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UpdateCheckerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UpdateCheckerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.SetChildrensParentToNull">
            <summary>
            Sets our childrens parent to null, which will make them dissappear from our childrens collection, and from the site's container.
            Some kind of awkward, but here it is the childrens responsabillity to remove themselves from the parents collection.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.Attach">
            <summary>
            Attach the object and its parent if needed.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.OnAttaching(System.EventArgs)">
            <summary>
            This event is fired before the internal attach of the object is executed. If the IsAttached property is set to true
            in the event handler of this event the interna attach code is never called.
            </summary>
            <param name="ea"></param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.DoAttach">
            <summary>
            Override this method to provide custom Attach logic in a derived class. If the attach succeed the <see cref="P:TestAutomationFX.UI.UIObject.IsAttached"/>IsAttached property should
            be set to true.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.AttachChildren">
            <summary>
            Attach the object, its parent and its children.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.Detach">
            <summary>
            Detach the object and its children.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.Reattach">
            <summary>
            Reattach the object and its children.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.Highlight">
            <summary>
            Shows the highlight rectangle around the UI object if it is attached.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.HideHighlight">
            <summary>
            Hides the highlight rectangle.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.WaitForObject(System.Int32)">
            <summary>
            Wait for the object to become available and visible.
            </summary>
            <param name="timeout">The time to wait for the object in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.WaitForObject">
            <summary>
            Waits for the object to be attached.
            </summary>
            <returns>true if it is attached, false if it could not be attached.</returns>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.Click">
            <summary>
            Perform a click action on the UI object.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.RightClick">
            <summary>
            Perform a right click on the UI object.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.MoveTo">
            <summary>
            Move the mouse to this object.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.MoveTo(System.Int32,System.Int32)">
            <summary>
            Move the mouse to the coordinates relative to this object.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.ObjectToScreen(System.Int32,System.Int32)">
            <summary>
            Convert object coordinates to a Point in screen coordinates.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>A point in screen coordinates.</returns>        
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.ObjectToScreen(System.Drawing.Point)">
            <summary>
            Convert a Point to a Point in screen coordinates.
            </summary>
            <param name="point">The point in coordinates relative to this object.</param>
            <returns>The point in screen coordinates.</returns>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.ScreenToObject(System.Int32,System.Int32)">
            <summary>
            Convert screen coordinates to coordinates relative to this object's current position.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>A point represention the x and y coordinates in the coordinates of this object.</returns>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.ScreenToObject(System.Drawing.Point)">
            <summary>
            Convert a point to coordinates relative to this object's current position.
            </summary>
            <param name="point">The point to convert in screen coordinates.</param>
            <returns>The point relative to this object.</returns>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.Click(System.Int32,System.Int32)">
            <summary>
            Perform a click on the position given.
            </summary>
            <param name="x">x position for the click</param>
            <param name="y">y position for the click</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.RightClick(System.Int32,System.Int32)">
            <summary>
            Perform a right click on the position given.
            </summary>
            <param name="x">x position for the click</param>
            <param name="y">y position for the click</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.DoubleClick">
            <summary>
            Perform a double click on the UI object.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.DoubleClick(System.Int32,System.Int32)">
            <summary>
            Perform a double click on the position given.
            </summary>
            <param name="x">x position for the click</param>
            <param name="y">y position for the click</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.Drag(System.Int32,System.Int32,TestAutomationFX.UI.UIObject,System.Int32,System.Int32)">
            <summary>
            Performs a drag and drop operation from this UIObject to another UIObject.
            </summary>
            <param name="sourceX">The x coordinate where the drag starts.</param>
            <param name="sourceY">The y coordinate where the drag starts.</param>
            <param name="targetObject"></param>
            <param name="destinationX">The x coordinate where the drag ends. Relative to the targetObject.</param>
            <param name="destinationY">The y coordinate where the drag ends. Relative to the targetObject.</param>        
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.Drag(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a drag and drop operation in this UIObject.
            </summary>
            <param name="sourceX">The x coordinate where the drag starts.</param>
            <param name="sourceY">The y coordinate where the drag starts.</param>
            <param name="destinationX">The x coordinate where the drag ends.</param>
            <param name="destinationY">The y coordinate where the drag ends.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.Drag(TestAutomationFX.UI.UIObject)">
            <summary>
            Performs a drag and drop operation from this UIObject to another UIObject.
            </summary>
            <param name="dragTarget">The target of the drag and drop operation.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.Drag(System.Int32,System.Int32,TestAutomationFX.UI.UIObject)">
            <summary>
            Performs a drag and drop operation of the UI object to the target UI object.
            The coordinates where the drag operation should start is specified.
            </summary>
            <param name="sourceX">The x coordinate in the Source object.</param>
            <param name="sourceY">The y coordinate in the Source object.</param>
            <param name="targetObject">The target of the drag and drop operation</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.Drag(TestAutomationFX.UI.UIObject,System.Int32,System.Int32)">
            <summary>
            Performs a drag and drop operation of the UI object to the target UI object.
            The coordinates where the drag operation should end is specified.
            </summary>
            <param name="targetObject">The target of the drag and drop operation.</param>
            <param name="destinationX">The x coordinate in the target object.</param>
            <param name="destinationY">The y coordinate in the target object.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.VerifyProperty(System.String,System.Object,System.String)">
            <summary>
            Verifies a property. Throws a VerifyException if the value does not match.
            </summary>
            <param name="propertyName">Name of the property to verify</param>
            <param name="expectedValue">Expected value to test against</param>
            <param name="message">An additional message describing the failure.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.VerifyProperty(System.String,System.Object)">
            <summary>
            Verifies a property. Throws a VerifyException if the value does not match.
            </summary>
            <param name="propertyName">Name of the property to verify</param>
            <param name="expectedValue">Expected value to test against</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.VerifyImage(System.String,System.String)">
            <summary>
            Verify that the current image of this UIObject is equal to the one stored in a file.
            </summary>
            <param name="imagePath">The path to the file used to compare the current image with.</param>
            <param name="message">An additional message describing the failure.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.VerifyImage(System.String)">
            <summary>
            Verify that the current image of this UIObject is equal to the one stored in a file.
            </summary>
            <param name="imagePath">The path to the file used to compare the current image with.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.VerifyImage">
            <summary>
            Verify that the current image of this UIObject is equal to the one stored in <see cref="P:TestAutomationFX.UI.UIObject.ObjectImage"/>.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.VerifyImage(System.Drawing.Bitmap,System.String)">
            <summary>
            Verify the current image of this UIObject.
            </summary>
            <param name="expectedImage">The expected image.</param>
            <param name="message">An additional message describing the failure.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.VerifyImage(System.Drawing.Bitmap)">
            <summary>
            Verify the current image of this UIObject.
            </summary>
            <param name="expectedImage">The expected image.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.VerifyImage(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Verify that to images are equal for thsi object.
            </summary>
            <param name="expectedImage">The expected image.</param>
            <param name="actualImage">The actual image.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.VerifyImage(System.Drawing.Bitmap,System.Drawing.Bitmap,System.String)">
            <summary>
            Verify that to images are equal for thsi object.
            </summary>
            <param name="expectedImage">The expected image.</param>
            <param name="actualImage">The actual image.</param>
            <param name="message">An additional message describing the failure.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.WaitForVisible">
            <summary>
            Wait for the object to become visible.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.WaitForEnabled">
            <summary>
            Wait for the object to become enabled.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.WaitForResponding">
            <summary>
            Wait for the application to become respondable
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.TakeImage">
            <summary>
            Updates the image of the UI object.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIObject.SaveImage(System.String)">
            <summary>
            Save a image to a file.
            </summary>
            <param name="filename">Name of the file to save into</param>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.Comment">
            <summary>
            A string property that can be used to store any additional information about this <see cref="T:TestAutomationFX.UI.UIObject"/>.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.Name">
            <summary>
            The name of this <see cref="T:TestAutomationFX.UI.UIObject"/>. The name is used to identify the objects in test logs and test logic code.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.Parent">
            <summary>
            The parent <see cref="T:TestAutomationFX.UI.UIObject"/> of this object in the <see cref="T:TestAutomationFX.UI.UIMap"/>.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.Children">
            <summary>
            The children of this object.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.AllowChildren">
            <summary>
            Set or get, if this UIObject will permitt any children. If false, actions will be recorded with coordinates
            relative to this object.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.MappingStatus">
            <summary>
            Set or gets the current mapping status. This is a indicator to the UIObject to make it possible to know if it is ok to e.g. reattach or not.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.IsAttached">
            <summary>
            This property indicates if this object has connected to the user interface element that it represents.
            </summary>
        </member>
        <member name="E:TestAutomationFX.UI.UIObject.Attached">
            <summary>
            This event fires after this object has attached.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.IsValid">
            <summary>
            This property indicates if a attached user interface element is still valid. If the object isn't attached
            this property should return false.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.Bounds">
            <summary>
            Gets the bounds of the UI object.
            </summary>     
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.CenterPoint">
            <summary>
            Gets the center point of the UI object in screen coordinates.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.RelativeCenterPoint">
            <summary>
            Gets the center point of the UI object in coordinates relative to the object's top left corner.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.ClickPoint">
            <summary>
            Gets the click point of the UI object.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.IsVisible">
            <summary>
            Gets the visible state of the UI object.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.IsOptional">
            <summary>
            Gets/sets if this object must be attached to proceed the test.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.TimeOut">
            <summary>
            Gets/sets the timeout for waiting on the UI object to be attached.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIObject.MousePath">
            <summary>
            Determines how the mouse is moved to this object.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIApplication.AreWindowBelongToUs(System.IntPtr)">
            <summary>
            All Your Base Are Belong To Us. Nah only kidding.
            Checks if the window in question belongs to this application by comparing the process id.
            </summary>
            <param name="windowHandle"></param>
            <returns></returns>
        </member>
        <member name="T:TestAutomationFX.Controls.NumericTextBox">
            <summary>
            Restricts the entry of characters to digits, the negative sign,
            the decimal point, and editing keystrokes (backspace).
            It does not handle the AltGr key so any keys that can be created in any
            combination with AltGr these are not filtered
            </summary>
        </member>
        <member name="M:TestAutomationFX.Controls.NumericTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Restricts the entry of characters to digits, the negative sign,
            the decimal point, and editing keystrokes (backspace).
            It does not handle the AltGr key
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TestAutomationFX.Controls.NumericTextBox.invalidNumeric(System.Char)">
            <summary>
            Main method for verifying allowed keypresses.
            This does not catch cut paste copy ... operations.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TestAutomationFX.Controls.NumericTextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Method invoked when Windows sends a message.
            </summary>
            <param name="m">Message from Windows.</param>
            <remarks>
            This is over-ridden so that the user can not use
            cut or paste operations to bypass the TextChanging event.
            This catches ContextMenu Paste, Shift+Insert, Ctrl+V,
            While it is generally frowned upon to override WndProc, no
            other simple mechanism was apparent to simultaneously and
            transparently intercept so many different operations.
            </remarks>
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.GetPixels(System.Drawing.Bitmap)">
            Creates new frame image from current data (and previous
            frames as specified by their disposition codes).
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.GetFrame(System.Int32)">
             Gets the image contents of frame n.
            
             @return BufferedImage representation of frame.
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.Read(System.IO.Stream)">
             Reads GIF image from stream
            
             @param BufferedInputStream containing GIF file.
             @return read status code (0 = no errors)
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.DecodeImageData">
            Decodes LZW image data into pixel array.
            Adapted from John Cristy's ImageMagick.
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.Error">
            Returns true if an error was encountered during reading/decoding
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.Init">
            Initializes or re-initializes reader
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.Read">
            Reads a single byte from the input stream.
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.ReadBlock">
             Reads next variable length block from input.
            
             @return number of bytes stored in "buffer"
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.ReadColorTable(System.Int32)">
             Reads color table as 256 RGB integer values
            
             @param ncolors int number of colors to read
             @return int array containing 256 colors (packed ARGB with full alpha)
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.ReadContents">
            Main file parser.  Reads GIF content blocks.
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.ReadGraphicControlExt">
            Reads Graphics Control Extension values
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.ReadHeader">
            Reads GIF file header information.
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.ReadImage">
            Reads next frame image
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.ReadLSD">
            Reads Logical Screen Descriptor
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.ReadNetscapeExt">
            Reads Netscape extenstion to obtain iteration count
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.ReadShort">
            Reads next 16-bit value, LSB first
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.ResetFrame">
            Resets frame state for reading next image.
        </member>
        <member name="M:TestAutomationFX.Controls.GifDecoder.Skip">
            Skips variable length blocks up to and including
            next zero length block.
        </member>
        <member name="P:TestAutomationFX.Controls.GifDecoder.FrameCount">
            Gets the number of frames read from file.
            @return frame count
        </member>
        <member name="P:TestAutomationFX.Controls.GifDecoder.Image">
             Gets the first (or only) image read.
            
             @return BufferedImage containing first frame, or null if none.
        </member>
        <member name="P:TestAutomationFX.Controls.GifDecoder.LoopCount">
             Gets the "Netscape" iteration count, if any.
             A count of 0 means repeat indefinitiely.
            
             @return iteration count if one was specified, else 1.
        </member>
        <member name="P:TestAutomationFX.Controls.GifDecoder.FrameSize">
             Gets image size.
            
             @return GIF image dimensions
        </member>
        <member name="F:TestAutomationFX.UI.TestRunner.TestMethodInfosControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestMethodInfosControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestMethodInfosControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Forms.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.Forms.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.Forms.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.ExceptionInfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.ExceptionInfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.Core.ExceptionInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIMsaa.MsaaName">
            <summary>
            If this property is set the value is used to find a Msaa object with the same name.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIMsaa.Index">
            <summary>
            If this property is set the value is used to find a Msaa object with the same index.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIMsaa.Role">
            <summary>
            If this property is set the value is used to find a Msaa object with the same role.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIMsaa.WrappedMsaaObject">
            <summary>
            Set and get the wrapped msaa object.
            </summary>
        </member>
        <member name="T:TestAutomationFX.UI.UIWindow">
             <summary>
             The UIWindow class is used to map a window on the screen to an object that can be controlled from the testing logic.
             The window can be mapped by:
            <list type="bullet">
            <item>Window text</item>
            <item>Window text by a regular expression</item>
            <item>The Windows Forms instance name</item>
            <item>The window class</item>
            <item>The control ID</item>
            <item>The child index of the window in the parent window</item>
            </list>
            </summary>
            <remarks>
            The mapping properties is set up automatically when adding objects e.g. during recording.       
            </remarks>
        </member>
        <member name="M:TestAutomationFX.UI.UIWindow.SetupFindWindowInfo(TestAutomationFX.Core.WindowsAPISupport.FindWindowInfo)">
            <summary>
            This method sets up a <see cref="T:TestAutomationFX.Core.WindowsAPISupport.FindWindowInfo"/> object from the MatchedProperty properties of this UIWindow object.
            </summary>
            <param name="findWindowInfo">The FindWindowInfo object to set up.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIWindow.Detach">
            <summary>
            Will detach this ibject from the attached window.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIWindow.BringToFront">
            <summary>
            Try to bring the attached window to front.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIWindow.TakeImage">
            <summary>
            Update the stored image of this object.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIWindow.SetupMatchedProperties">
            <summary>
            This property stores the MatchedProperties from the attached window object.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIWindow.InvokeMethod(System.String,System.Object[])">
            <summary>
            This method is used to invoke methods in the tested application. This method can only be called on UIWindow objects
            that are attached to Windows Forms Controls. Public as weill as non-public methods can be called.
            </summary>
            <param name="methodName">The name of the method to call.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <returns></returns>
        </member>
        <member name="M:TestAutomationFX.UI.UIWindow.SelectItem(System.String)">
            <summary>
            Select an item in this UIWindow object. For instance select a listbox item.
            </summary>
            <param name="itemName">The name of the object to select.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIWindow.ClickItem(System.String)">
            <summary>
            Click an item in this UIWindow object. For instance click a treenode item.
            </summary>
            <param name="itemName">The name of the object to click.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIWindow.CheckItem(System.String)">
            <summary>
            Check an item in this UIWindow object. For instance check a listbox item.
            </summary>
            <param name="itemName">The name of the object to check.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIWindow.UncheckItem(System.String)">
            <summary>
            Uncheck an item in this UIWindow object. For instance uncheck a listbox item.
            </summary>
            <param name="itemName">The name of the object to uncheck.</param>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.Window">
            <summary>
            This property sets/gets the window that this UIObject is attached to.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.RawWindow">
            <summary>
            This property sets/gets the window that this UIObject is attached to. No logic is invoked
            when gettng or setting the RawWindow property, That is, if the UIWindow is unattached this
            property will return null. 
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.Description">
            <summary>
            A description of this UIWindow.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.IsVisible">
            <summary>
            A property that tells if this object is visible or not.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.Bounds">
            <summary>
            Gets the bounds of the UI object.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.WindowText">
            <summary>
            If this property is set the value can be used to find a window with the corresponding text.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.RegExWindowText">
            <summary>
            If this property is set the value can be used to find a window where the window text matches
            the regular expression that this property describes.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.ControlId">
            <summary>
            If this property is set the value can be used to find a window with the same control id.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.Index">
            <summary>
            If this property is set the value can be used to find a window with the same index.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.InstanceName">
            <summary>
            If this property is set the value can be used to find a window belonging to a Wndows Forms Control
            with that name.        
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.OwnedWindow">
            <summary>
            Determines if this object is a owned window. That is, if this object will be found in the owned windows collection of the parent.
            Owned window are different from child windows in that they are not contained within the parent e.g. a popup window, dialog etc.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.IsValid">
            <summary>
            Returns whether this object is attached to a window that is still valid.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.Text">
            <summary>
            This property returns the text of the attached object.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.IsEnabled">
            <summary>
            Returns if the attached object is enabled or not.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.IsFocused">
            <summary>
            Returns if the attached object is enabled or not.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.WindowClass">
            <summary>
            If this property is set the value can be used to find a window with the corresponding window class.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.Properties">
            <summary>
            Property to access the properties of the Windows Forms control associated with this window.
            </summary>
            <example>
            This sample shows how to set BackColor property of a Form. Then the Text property is shown in a message box. 
            <pre title="Code example" lang="cs">
            <code source="C:\Projects\TAFX\TestAutomationFX.CodeSamples\CodeSamples.cs" region="UseProperties" />
            </pre>
            </example>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.MsaaObject">
            <summary>
            This property will return the MSAA object corresponding to the window attached to this UIWindow object.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIWindow.MsaaRole">
            <summary>
            If this property is set the value can be used to find a window belonging to a Wndows Forms Control
            with that name.        
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.AddUIMapChildForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.AddUIMapChildForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.AddUIMapChildForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.TestRunner.TestSuiteControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestSuiteControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestSuiteControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.TestRunner.TestProjectServerManager.FireReportStatus(System.String)">
            <summary>
            Triggers the ReportStatus event.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.TestRunner.TestProjectServerManager.FireReportWaitProgress(System.Int32,System.Int32,System.String)">
            <summary>
            Triggers the ReportWaitProgress event.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.Performance.SimpleTimer">
            <summary>
            A helper class which writes out the elapsed milliseconds from when the object was created until it's disposed.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.Performance.SimpleTimer.StartTimer(System.String)">
            <summary>
            Creates a SimpleTimer object which will start the internal timer.
            </summary>
            <param name="operation">The actual operation that will be timed. Will be inserted into the debug output.</param>
            <returns>Returns the SimpleTimer which must be disposed to stop the timer.</returns>
        </member>
        <member name="T:TestAutomationFX.Core.Logging.LogData">
            <summary>
            Base class for the specific LogData classes. The LogData objects are used to add additonal information to a
            <see cref="T:TestAutomationFX.Core.Logging.LogEntry"/>.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.Logging.LogData.Save">
            <summary>
            Save the information of this LogData object.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.Logging.LogData.Load">
            <summary>
            Load infromation into this LogData object.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.Logging.LogData.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Show the details of this LogData object.
            </summary>
            <param name="owner">The owner window.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Logging.LogData.CanShow">
            <summary>
            Returns wheter this LogData object can show details or not.
            </summary>
            <returns>Returns true if the object can show details, false if no detail information is available. False is the default.</returns>
        </member>
        <member name="F:TestAutomationFX.Core.ImageDiffViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.ImageDiffViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.Core.ImageDiffViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.CodeGeneration.VSCodeHelper.#ctor(System.ComponentModel.ISite)">
            <summary>
            Initializes a new instance of the VSCodeHelper class.
            </summary>
            <param name="site"></param>
        </member>
        <member name="F:TestAutomationFX.UI.AutomationElementInfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.AutomationElementInfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.AutomationElementInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Controls.Tree.InputState.MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            handle OnMouseMove event
            </summary>
            <param name="args"></param>
            <returns>true if event was handled and should be dispatched</returns>
        </member>
        <member name="M:TestAutomationFX.UI.Design.UIMapDesignerView.Flush">
            <summary>
            Makes sure any unsaved information will be serialized by codedom before inserting/showing code, or else it might be lost.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.Design.UIMapDesignerView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.Design.UIMapDesignerView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.Design.UIMapDesignerView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.Design.UIMapDesignerView.RecordingForm">
            <summary>
            Gets the RecordingForm.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.CrossHairControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.CrossHairControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.CrossHairControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.Hooks.UserActivityHook">
            <summary>
            This class allows you to tap keyboard and mouse and / or to detect their activity even when an 
            application runes in background or does not have any user interface at all. This class raises 
            common .NET events with KeyEventArgs and MouseEventArgs so you can easily retrive any information you need.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WH_MOUSE_LL">
            <summary>
            Windows NT/2000/XP: Installs a hook procedure that monitors low-level mouse input events.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WH_KEYBOARD_LL">
            <summary>
            Windows NT/2000/XP: Installs a hook procedure that monitors low-level keyboard  input events.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WH_MOUSE">
            <summary>
            Installs a hook procedure that monitors mouse messages. For more information, see the MouseProc hook procedure. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WH_KEYBOARD">
            <summary>
            Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc hook procedure. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_MBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is posted when the user presses the mouse wheel. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem 
            key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem 
            key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, 
            or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user 
            presses the F10 key (which activates the menu bar) or holds down the ALT key and then 
            presses another key. It also occurs when no window currently has the keyboard focus; 
            in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that 
            receives the message can distinguish between these two contexts by checking the context 
            code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.WM_SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user 
            releases a key that was pressed while the ALT key was held down. It also occurs when no 
            window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent 
            to the active window. The window that receives the message can distinguish between 
            these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.SetWindowsHookEx(System.Int32,TestAutomationFX.Core.Hooks.UserActivityHook.HookProc,System.IntPtr,System.Int32)">
            <summary>
            The SetWindowsHookEx function installs an application-defined hook procedure into a hook chain. 
            You would install a hook procedure to monitor the system for certain types of events. These events 
            are associated either with a specific thread or with all threads in the same desktop as the calling thread. 
            </summary>
            <param name="idHook">
            [in] Specifies the type of hook procedure to be installed. This parameter can be one of the following values.
            </param>
            <param name="lpfn">
            [in] Pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier of a 
            thread created by a different process, the lpfn parameter must point to a hook procedure in a dynamic-link 
            library (DLL). Otherwise, lpfn can point to a hook procedure in the code associated with the current process.
            </param>
            <param name="hMod">
            [in] Handle to the DLL containing the hook procedure pointed to by the lpfn parameter. 
            The hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread created by 
            the current process and if the hook procedure is within the code associated with the current process. 
            </param>
            <param name="dwThreadId">
            [in] Specifies the identifier of the thread with which the hook procedure is to be associated. 
            If this parameter is zero, the hook procedure is associated with all existing threads running in the 
            same desktop as the calling thread. 
            </param>
            <returns>
            If the function succeeds, the return value is the handle to the hook procedure.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.UnhookWindowsHookEx(System.Int32)">
            <summary>
            The UnhookWindowsHookEx function removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. 
            </summary>
            <param name="idHook">
            [in] Handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to SetWindowsHookEx. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.CallNextHookEx(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            The CallNextHookEx function passes the hook information to the next hook procedure in the current hook chain. 
            A hook procedure can call this function either before or after processing the hook information. 
            </summary>
            <param name="idHook">Ignored.</param>
            <param name="nCode">
            [in] Specifies the hook code passed to the current hook procedure. 
            The next hook procedure uses this code to determine how to process the hook information.
            </param>
            <param name="wParam">
            [in] Specifies the wParam value passed to the current hook procedure. 
            The meaning of this parameter depends on the type of hook associated with the current hook chain. 
            </param>
            <param name="lParam">
            [in] Specifies the lParam value passed to the current hook procedure. 
            The meaning of this parameter depends on the type of hook associated with the current hook chain. 
            </param>
            <returns>
            This value is returned by the next hook procedure in the chain. 
            The current hook procedure must also return this value. The meaning of the return value depends on the hook type. 
            For more information, see the descriptions of the individual hook procedures.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            The ToAscii function translates the specified virtual-key code and keyboard 
            state to the corresponding character or characters. The function translates the code 
            using the input language and physical keyboard layout identified by the keyboard layout handle.
            </summary>
            <param name="uVirtKey">
            [in] Specifies the virtual-key code to be translated. 
            </param>
            <param name="uScanCode">
            [in] Specifies the hardware scan code of the key to be translated. 
            The high-order bit of this value is set if the key is up (not pressed). 
            </param>
            <param name="lpbKeyState">
            [in] Pointer to a 256-byte array that contains the current keyboard state. 
            Each element (byte) in the array contains the state of one key. 
            If the high-order bit of a byte is set, the key is down (pressed). 
            The low bit, if set, indicates that the key is toggled on. In this function, 
            only the toggle bit of the CAPS LOCK key is relevant. The toggle state 
            of the NUM LOCK and SCROLL LOCK keys is ignored.
            </param>
            <param name="lpwTransKey">
            [out] Pointer to the buffer that receives the translated character or characters. 
            </param>
            <param name="fuState">
            [in] Specifies whether a menu is active. This parameter must be 1 if a menu is active, or 0 otherwise. 
            </param>
            <returns>
            If the specified key is a dead key, the return value is negative. Otherwise, it is one of the following values. 
            Value Meaning 
            0 The specified virtual key has no translation for the current state of the keyboard. 
            1 One character was copied to the buffer. 
            2 Two characters were copied to the buffer. This usually happens when a dead-key character 
            (accent or diacritic) stored in the keyboard layout cannot be composed with the specified 
            virtual key to form a single character. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.GetKeyboardState(System.Byte[])">
            <summary>
            The GetKeyboardState function copies the status of the 256 virtual keys to the 
            specified buffer. 
            </summary>
            <param name="pbKeyState">
            [in] Pointer to a 256-byte array that contains keyboard key states. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.#ctor">
            <summary>
            Creates an instance of UserActivityHook object and sets mouse and keyboard hooks.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of UserActivityHook object and installs both or one of mouse and/or keyboard hooks and starts rasing events
            </summary>
            <param name="InstallMouseHook"><b>true</b> if mouse events must be monitored</param>
            <param name="InstallKeyboardHook"><b>true</b> if keyboard events must be monitored</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
            <remarks>
            To create an instance without installing hooks call new UserActivityHook(false, false)
            </remarks>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.Finalize">
            <summary>
            Destruction.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.hMouseHook">
            <summary>
            Stores the handle to the mouse hook procedure.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.hKeyboardHook">
            <summary>
            Stores the handle to the keyboard hook procedure.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.MouseHookProcedure">
            <summary>
            Declare MouseHookProcedure as HookProc type.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.KeyboardHookProcedure">
            <summary>
            Declare KeyboardHookProcedure as HookProc type.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.Start">
            <summary>
            Installs both mouse and keyboard hooks and starts rasing events
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.Start(System.Boolean,System.Boolean)">
            <summary>
            Installs both or one of mouse and/or keyboard hooks and starts rasing events
            </summary>
            <param name="InstallMouseHook"><b>true</b> if mouse events must be monitored</param>
            <param name="InstallKeyboardHook"><b>true</b> if keyboard events must be monitored</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.Stop">
            <summary>
            Stops monitoring both mouse and keyboard events and rasing events.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.Stop(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Stops monitoring both or one of mouse and/or keyboard events and rasing events.
            </summary>
            <param name="UninstallMouseHook"><b>true</b> if mouse hook must be uninstalled</param>
            <param name="UninstallKeyboardHook"><b>true</b> if keyboard hook must be uninstalled</param>
            <param name="ThrowExceptions"><b>true</b> if exceptions which occured during uninstalling must be thrown</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Any windows problem.</exception>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.MouseHookProc(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            A callback function which will be called every time a mouse activity detected.
            </summary>
            <param name="nCode">
            [in] Specifies whether the hook procedure must process the message. 
            If nCode is HC_ACTION, the hook procedure must process the message. 
            If nCode is less than zero, the hook procedure must pass the message to the 
            CallNextHookEx function without further processing and must return the 
            value returned by CallNextHookEx.
            </param>
            <param name="wParam">
            [in] Specifies whether the message was sent by the current thread. 
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
            </param>
            <param name="lParam">
            [in] Pointer to a CWPSTRUCT structure that contains details about the message. 
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
        </member>
        <member name="M:TestAutomationFX.Core.Hooks.UserActivityHook.KeyboardHookProc(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            A callback function which will be called every time a keyboard activity detected.
            </summary>
            <param name="nCode">
            [in] Specifies whether the hook procedure must process the message. 
            If nCode is HC_ACTION, the hook procedure must process the message. 
            If nCode is less than zero, the hook procedure must pass the message to the 
            CallNextHookEx function without further processing and must return the 
            value returned by CallNextHookEx.
            </param>
            <param name="wParam">
            [in] Specifies whether the message was sent by the current thread. 
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
            </param>
            <param name="lParam">
            [in] Pointer to a CWPSTRUCT structure that contains details about the message. 
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
        </member>
        <member name="E:TestAutomationFX.Core.Hooks.UserActivityHook.MouseHookEvent">
            <summary>
            Occurs when the user moves the mouse, presses any mouse button or scrolls the wheel
            </summary>
        </member>
        <member name="E:TestAutomationFX.Core.Hooks.UserActivityHook.KeyDown">
            <summary>
            Occurs when the user presses a key
            </summary>
        </member>
        <member name="E:TestAutomationFX.Core.Hooks.UserActivityHook.KeyPress">
            <summary>
            Occurs when the user presses and releases 
            </summary>
        </member>
        <member name="E:TestAutomationFX.Core.Hooks.UserActivityHook.KeyUp">
            <summary>
            Occurs when the user releases a key
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.Hooks.UserActivityHook.POINT">
            <summary>
            The POINT structure defines the x- and y- coordinates of a point. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/gdi/rectangl_0tiq.asp
            </remarks>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.POINT.x">
            <summary>
            Specifies the x-coordinate of the point. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.POINT.y">
            <summary>
            Specifies the y-coordinate of the point. 
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.Hooks.UserActivityHook.MouseHookStruct">
            <summary>
            The MOUSEHOOKSTRUCT structure contains information about a mouse event passed to a WH_MOUSE hook procedure, MouseProc. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookstructures/cwpstruct.asp
            </remarks>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.MouseHookStruct.pt">
            <summary>
            Specifies a POINT structure that contains the x- and y-coordinates of the cursor, in screen coordinates. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.MouseHookStruct.hwnd">
            <summary>
            Handle to the window that will receive the mouse message corresponding to the mouse event. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.MouseHookStruct.wHitTestCode">
            <summary>
            Specifies the hit-test value. For a list of hit-test values, see the description of the WM_NCHITTEST message. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.MouseHookStruct.dwExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.Hooks.UserActivityHook.MouseLLHookStruct">
            <summary>
            The MSLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.MouseLLHookStruct.pt">
            <summary>
            Specifies a POINT structure that contains the x- and y-coordinates of the cursor, in screen coordinates. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.MouseLLHookStruct.mouseData">
             <summary>
             If the message is WM_MOUSEWHEEL, the high-order word of this member is the wheel delta. 
             The low-order word is reserved. A positive value indicates that the wheel was rotated forward, 
             away from the user; a negative value indicates that the wheel was rotated backward, toward the user. 
             One wheel click is defined as WHEEL_DELTA, which is 120. 
            If the message is WM_XBUTTONDOWN, WM_XBUTTONUP, WM_XBUTTONDBLCLK, WM_NCXBUTTONDOWN, WM_NCXBUTTONUP,
             or WM_NCXBUTTONDBLCLK, the high-order word specifies which X button was pressed or released, 
             and the low-order word is reserved. This value can be one or more of the following values. Otherwise, mouseData is not used. 
            XBUTTON1
            The first X button was pressed or released.
            XBUTTON2
            The second X button was pressed or released.
             </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.MouseLLHookStruct.flags">
             <summary>
             Specifies the event-injected flag. An application can use the following value to test the mouse flags. Value Purpose 
            LLMHF_INJECTED Test the event-injected flag.  
            0
            Specifies whether the event was injected. The value is 1 if the event was injected; otherwise, it is 0.
            1-15
            Reserved.
             </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.MouseLLHookStruct.time">
            <summary>
            Specifies the time stamp for this message.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.MouseLLHookStruct.dwExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.Hooks.UserActivityHook.KeyboardHookStruct">
            <summary>
            The KBDLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookstructures/cwpstruct.asp
            </remarks>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.KeyboardHookStruct.vkCode">
            <summary>
            Specifies a virtual-key code. The code must be a value in the range 1 to 254. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.KeyboardHookStruct.scanCode">
            <summary>
            Specifies a hardware scan code for the key. 
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.KeyboardHookStruct.flags">
            <summary>
            Specifies the extended-key flag, event-injected flag, context code, and transition-state flag.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.KeyboardHookStruct.time">
            <summary>
            Specifies the time stamp for this message.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Hooks.UserActivityHook.KeyboardHookStruct.dwExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.Hooks.UserActivityHook.HookProc">
            <summary>
            The CallWndProc hook procedure is an application-defined or library-defined callback 
            function used with the SetWindowsHookEx function. The HOOKPROC type defines a pointer 
            to this callback function. CallWndProc is a placeholder for the application-defined 
            or library-defined function name.
            </summary>
            <param name="nCode">
            [in] Specifies whether the hook procedure must process the message. 
            If nCode is HC_ACTION, the hook procedure must process the message. 
            If nCode is less than zero, the hook procedure must pass the message to the 
            CallNextHookEx function without further processing and must return the 
            value returned by CallNextHookEx.
            </param>
            <param name="wParam">
            [in] Specifies whether the message was sent by the current thread. 
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
            </param>
            <param name="lParam">
            [in] Pointer to a CWPSTRUCT structure that contains details about the message. 
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/callwndproc.asp
            </remarks>
        </member>
        <member name="T:TestAutomationFX.Controls.Tree.TreeListAdapter">
            <summary>
            Converts IEnumerable interface to ITreeModel. 
            Allows to display a plain list in the TreeView
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.TestRunner.TestSuiteItem.#ctor">
            <summary>
            Initializes a new instance of the TestSuiteItem class.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.TestRunner.TestSuiteItem.Run">
            <summary>
            This method is called every time the item is executed.
            </summary>
        </member>
        <member name="P:TestAutomationFX.Core.TestRunner.TestSuiteItem.Count">
            <summary>
            The number of times the item shold be executed.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.TestRunner.TestRunnerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestRunnerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestRunnerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestFixtureInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the TestFixtureInfo class.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.ImageViewerControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.ImageViewerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.Core.ImageViewerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.FileBrowseControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.FileBrowseControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.Core.FileBrowseControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.PollingTimer.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the PollingTimer class.
            </summary>
            <param name="timeout"></param>
            <param name="sleepTime"></param>
            <param name="timeoutMessage"></param>
        </member>
        <member name="M:TestAutomationFX.Core.PollingTimer.Run">
            <summary>
            Called to make the timer sleep for the specified time.
            The timer doesn't sleep the first time the function is called.
            </summary>
            <returns>Return true when the PollResult has been set to true.</returns>
        </member>
        <member name="T:TestAutomationFX.Core.NativeMethods">
            <exclude/>    
        </member>
        <member name="M:TestAutomationFX.Core.MsaaObject.GetFirstAvailableMsaaObjectWithRole(System.IntPtr,System.Windows.Forms.AccessibleRole)">
            <summary>
            Returns the first available MsaaObject that has children that fits to the role and is visible
            </summary>
            <param name="windowHandle">The window handle to start the search from</param>
            <param name="accessibleRole">The child role to search for.</param>
            <returns></returns>
        </member>
        <member name="M:TestAutomationFX.Core.MsaaObject.GetBounds">
            <summary>
            Gets the actual bounds for this Msaa object from the Msaa subsystem.
            </summary>
            <returns>The bounding rectangle returned from the Msaa framework. Can never be null, but might be an empty rectangle</returns>
        </member>
        <member name="M:TestAutomationFX.Core.MsaaObject.TryCalculateBoundsForListItems">
            <summary>
            In some cases on Windows XP the ListItem has no bounds like in Vista (when we need to scroll it into view).
            Here we tries to calculate our possible bounding rectangle by looking at our siblings.
            </summary>
            <returns>A calculated rectangle</returns>
        </member>
        <member name="M:TestAutomationFX.Core.Recording.RecorderLogItem.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the RecorderLogItem class.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.Design.UIMapDesigner.Flush">
            <summary>
            Calls flush on the DesignerLoader, this will serialize any unsaved data.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.VerifyException">
            <summary>
            A VerifyException is thrown when a verification fails.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.DelayForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.DelayForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.DelayForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.AddVerificationForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.AddVerificationForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.AddVerificationForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.AddObjectForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.AddObjectForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.AddObjectForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.LogLevel">
            <summary>
            A enum describing the different levels of log entries.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.LogLevel.Fatal">
            <summary>
            This level is used to log an unexpected and fatal error.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.LogLevel.Error">
            <summary>
            This level is used to log failures and errors of any kind.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.LogLevel.Warning">
            <summary>
            This level is used to warn about potentially dangerous situations.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.LogLevel.Success">
            <summary>
            This level is used to report importatnt successes. E.g. when verifications succeed,
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.LogLevel.Information">
            <summary>
            This level is used to log important information of the progress of the test.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.LogLevel.Event">
            <summary>
            This level is uded for sub event in the log. As detailed attach information.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.LogLevel.Debug">
            <summary>
            The lowest level of log infromation. It is often used during debugging and development.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.SimpleSite.#ctor(System.ComponentModel.IContainer,System.ComponentModel.IComponent,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the PropertyGridSite class.
            </summary>
            <param name="container"></param>
            <param name="component"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="T:TestAutomationFX.Core.Log">
            <summary>
            The Log class has a variety of functions to allow the user to send information to the log.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.Log.Message(System.String,TestAutomationFX.Core.LogLevel)">
            <summary>
            Logs a message to the log. The level can be specified with a <see cref="T:TestAutomationFX.Core.LogLevel"/> parameter.&gt;
            </summary>
            <param name="message">The message to log.</param>
            <param name="logLevel">The level to log with.</param>
            <remarks>Logging a message with the level Error does not fail the test. To fail the test with a error log message you should use <see cref="M:TestAutomationFX.Core.Verify.FailTest(System.String)"/>.</remarks>
        </member>
        <member name="M:TestAutomationFX.Core.Log.Message(System.String,TestAutomationFX.Core.LogLevel,TestAutomationFX.Core.Logging.LogData)">
            <summary>
            Logs a message to the log. The level can be specified with a <see cref="T:TestAutomationFX.Core.LogLevel"/> parameter.&gt;
            An additional <see cref="T:TestAutomationFX.Core.Logging.LogData"/> object is also added to the log. 
            </summary>
            <param name="message">The message to log.</param>
            <param name="logLevel">The level to log with.</param>
            <param name="logData">The logData object to add to the log.</param>
            <remarks>Logging a message with the level Error does not fail the test. To fail the test with a error log message you should use <see cref="M:TestAutomationFX.Core.Verify.FailTest(System.String)"/>.</remarks> 
        </member>
        <member name="M:TestAutomationFX.Core.Log.Information(System.String,TestAutomationFX.Core.Logging.LogData)">
            <summary>
            Logs a message to the log with the <see cref="F:TestAutomationFX.Core.LogLevel.Information"/> level.
            An additional <see cref="T:TestAutomationFX.Core.Logging.LogData"/> object is also added to the log. 
            </summary>
            <param name="message">The message to log.</param>
            <param name="logData">The LogData object to add to the log.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Log.Information(System.String)">
            <summary>
            Logs a message to the log with the <see cref="F:TestAutomationFX.Core.LogLevel.Information"/> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Log.Warning(System.String,TestAutomationFX.Core.Logging.LogData)">
            <summary>
            Logs a message to the log with the <see cref="F:TestAutomationFX.Core.LogLevel.Warning"/> level.
            An additional <see cref="T:TestAutomationFX.Core.Logging.LogData"/> object is also added to the log. 
            </summary>
            <param name="message">The message to log.</param>
            <param name="logData">The LogData object to add to the log.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Log.Warning(System.String)">
            <summary>
            Logs a message to the log with the <see cref="F:TestAutomationFX.Core.LogLevel.Warning"/> level.
            An additional <see cref="T:TestAutomationFX.Core.Logging.LogData"/> object is also added to the log. 
            </summary>
            <param name="message">The message to log.</param>       
        </member>
        <member name="M:TestAutomationFX.Core.Log.Error(System.String,TestAutomationFX.Core.Logging.LogData)">
            <summary>
            Logs a message to the log with the <see cref="F:TestAutomationFX.Core.LogLevel.Error"/> level.
            An additional <see cref="T:TestAutomationFX.Core.Logging.LogData"/> object is also added to the log. 
            </summary>
            <param name="message">The message to log.</param>
            <param name="logData">The LogData object to add to the log.</param>
            <remarks>Logging a message with the level Error does not fail the test. To fail the test with a error log message you should use <see cref="M:TestAutomationFX.Core.Verify.FailTest(System.String)"/>.</remarks>
        </member>
        <member name="M:TestAutomationFX.Core.Log.Error(System.String)">
            <summary>
            Logs a message to the log with the <see cref="F:TestAutomationFX.Core.LogLevel.Error"/> level.       
            </summary>
            <param name="message">The message to log.</param>       
            <remarks>Logging a message with the level Error does not fail the test. To fail the test with a error log message you should use <see cref="M:TestAutomationFX.Core.Verify.FailTest(System.String)"/>.</remarks>
        </member>
        <member name="M:TestAutomationFX.Core.Log.Fatal(System.String,TestAutomationFX.Core.Logging.LogData)">
            <summary>
            Logs a message to the log with the <see cref="F:TestAutomationFX.Core.LogLevel.Fatal"/> level.
            An additional <see cref="T:TestAutomationFX.Core.Logging.LogData"/> object is also added to the log. 
            </summary>
            <param name="message">The message to log.</param>
            <param name="logData">The LogData object to add to the log.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Log.Fatal(System.String)">
            <summary>
            Logs a message to the log with the <see cref="F:TestAutomationFX.Core.LogLevel.Fatal"/> level.        
            </summary>
            <param name="message">The message to log.</param>       
        </member>
        <member name="M:TestAutomationFX.Core.Log.Success(System.String,TestAutomationFX.Core.Logging.LogData)">
            <summary>
            Logs a message to the log with the <see cref="F:TestAutomationFX.Core.LogLevel.Success"/> level.
            An additional <see cref="T:TestAutomationFX.Core.Logging.LogData"/> object is also added to the log. 
            </summary>
            <param name="message">The message to log.</param>
            <param name="logData">The LogData object to add to the log.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Log.Success(System.String)">
            <summary>
            Logs a message to the log with the <see cref="F:TestAutomationFX.Core.LogLevel.Success"/> level.        
            </summary>
            <param name="message">The message to log.</param>        
        </member>
        <member name="M:TestAutomationFX.Core.Log.Image(System.Drawing.Image,System.String,TestAutomationFX.Core.LogLevel)">
            <summary>
            Logs an image to the log.
            </summary>
            <param name="image">The image to log.</param>
            <param name="message">>The message to log.</param>
            <param name="logLevel">The level to log with.</param>
        </member>
        <member name="F:TestAutomationFX.UI.UIMap.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIMap.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIMap.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TestAutomationFX.UI.UIMap.RootUIObject">
            <summary>
            For backward compability, we do not remove this even though it is not needed anymore. Users should use the UIMapObjectApplications.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Controls.Tree.TreeModelEventArgs.#ctor(TestAutomationFX.Controls.Tree.TreePath,System.Object[])">
            <summary>
            
            </summary>
            <param name="parent">Path to a parent node</param>
            <param name="children">Child nodes</param>
        </member>
        <member name="M:TestAutomationFX.Controls.Tree.TreeModelEventArgs.#ctor(TestAutomationFX.Controls.Tree.TreePath,System.Int32[],System.Object[])">
            <summary>
            
            </summary>
            <param name="parent">Path to a parent node</param>
            <param name="indices">Indices of children in parent nodes collection</param>
            <param name="children">Child nodes</param>
        </member>
        <member name="P:TestAutomationFX.Core.TestRunner.TestCallItem.ItemToCallId">
            <summary>
            The Id of the item this object should call when executed
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.Recording.AddCommentForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.Recording.AddCommentForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Recording.AddCommentForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.RecordingForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.RecordingForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.RecordingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.InsertRecordedCodeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.InsertRecordedCodeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.InsertRecordedCodeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Controls.PerformanceAnalyzer">
            <summary>
            Is used to analyze code performance
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.Design.NameCreationService.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the NameCreationService class.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:TestAutomationFX.Core.Performance.SimpleTimerManager.#ctor">
            <summary>
            Initializes a new instance of the SimpleTimerManager class.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.ObjectInfoControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.ObjectInfoControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.ObjectInfoControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.WindowController">
            <summary>
            This class is used as a wrapper for a native window.   
            </summary>       
        </member>
        <member name="M:TestAutomationFX.Core.WindowController.FindChild(System.String,System.Int32)">
            <summary>
            Finds a child by the window text.
            </summary>
            <param name="windowText">The window text to search for.</param>
            <param name="timeout">The time to wait for the window.</param>
            <returns>A <see cref="T:TestAutomationFX.Core.WindowController"/> wrapping the found window.</returns> 
        </member>
        <member name="F:TestAutomationFX.UI.UIMapTreeView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.UIMapTreeView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.UIMapTreeView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Controls.Tree.NodeControls.ExpandingIcon">
            <summary>
            Displays an animated icon for those nodes, who are in expanding state. 
            Parent TreeView must have AsyncExpanding property set to true.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.TestRunner.TestStatusReporter.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestStatusReporter.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
                  
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestStatusReporter.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Controls.Tree.TreeModel">
            <summary>
            Provides a simple ready to use implementation of ITreeModel. Warning: this class is not optimized 
            to work with big amount of data. In this case create you own implementation of ITreeModel, and pay attention
            on GetChildren and IsLeaf methods.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Controls.ResourceHelper.GetCursor(System.Byte[])">
            <summary>
            Help function to convert byte[] from resource into Cursor Type 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:TestAutomationFX.Controls.ResourceHelper.GetGifDecoder(System.Byte[])">
            <summary>
            Help function to convert byte[] from resource into GifDecoder Type 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="F:TestAutomationFX.UI.TestRunner.TestStatusLogControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestStatusLogControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.TestRunner.TestStatusLogControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.Core.BetaProgram.BetaInformation.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.BetaProgram.BetaInformation.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.Core.BetaProgram.BetaInformation.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestAutomationFX.UI.WindowInfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.WindowInfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestAutomationFX.UI.WindowInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestAutomationFX.UI.GridCellsCollection.#ctor(TestAutomationFX.UI.UIGridView)">
            <summary>
            Initializes a new instance of the GridCellsCollection class.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Core.HardCoded">
            <summary>
            This class contains hardcoded stuff meant to be refactored or relocated later. 
            </summary>
        </member>
        <member name="P:TestAutomationFX.Controls.Tree.TreeNodeAdv.IsVisible">
            <summary>
            Returns true if all parent nodes of this node are expanded.
            </summary>
        </member>
        <member name="T:TestAutomationFX.Controls.TimeCounter">
            <summary>
            High resolution timer, used to test performance
            </summary>
        </member>
        <member name="M:TestAutomationFX.Controls.TimeCounter.Start">
            <summary>
            Start time counting
            </summary>
        </member>
        <member name="M:TestAutomationFX.Controls.TimeCounter.Finish">
            <summary>
            Finish time counting
            </summary>
            <returns>time in seconds elapsed from Start till Finish	</returns>
        </member>
        <member name="T:TestAutomationFX.Core.TestStatusLoggerManager">
            <summary>
            TestStatusLoggerManager can be used to report different kinds of status messages to the test runner log window.
            </summary>
        </member>
        <member name="M:TestAutomationFX.Core.TestStatusLoggerManager.ReportStatus(System.String)">
            <summary>
            Sends a message to the test status logger object.
            </summary>
            <param name="statusMessage">The message that will be sent to the test status logger.</param>
        </member>
        <member name="M:TestAutomationFX.Core.TestStatusLoggerManager.ReportStatus(System.String,TestAutomationFX.Core.LogLevel)">
            <summary>
            Sends a message to the test status logger object.
            </summary>
            <param name="statusMessage">The message that will be sent to the test status logger.</param>
            <param name="logLevel">Which log level the message will belong to.</param>
        </member>
        <member name="M:TestAutomationFX.Core.TestStatusLoggerManager.ReportStatus(System.String,TestAutomationFX.Core.LogLevel,TestAutomationFX.Core.Logging.LogData)">
            <summary>
            Sends a message to the test status logger object.
            </summary>
            <param name="statusMessage">The message that will be sent to the test status logger.</param>
            <param name="logLevel">Which log level the message will belong to.</param>
            <param name="logData">Special log data that will be save to the log.</param>
        </member>
        <member name="M:TestAutomationFX.Core.TestStatusLoggerManager.ReportWaitProgress(System.Int32,System.Int32,System.String)">
            <summary>
            Reports wait status for operations that will take time.
            </summary>
            <param name="currenttime">The current time.</param>
            <param name="totaltime">The total expected time.</param>
            <param name="message">A message attached to the wait operation.</param>
        </member>
        <member name="M:TestAutomationFX.Core.Recording.RecordedMouseAction.#ctor(System.Object,System.String,System.Drawing.Point,System.Boolean)">
            <summary>
            Initializes a new instance of the RecordedMouseAction class.
            </summary>
        </member>
    </members>
</doc>
